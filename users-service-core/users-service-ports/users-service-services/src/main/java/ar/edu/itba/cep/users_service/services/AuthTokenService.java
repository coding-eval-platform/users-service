package ar.edu.itba.cep.users_service.services;

import ar.edu.itba.cep.users_service.models.AuthToken;
import ar.edu.itba.cep.users_service.models.User;
import com.bellotapps.webapps_commons.exceptions.NoSuchEntityException;
import com.bellotapps.webapps_commons.exceptions.UnauthenticatedException;
import com.bellotapps.webapps_commons.exceptions.UnauthorizedException;

import java.util.List;
import java.util.UUID;

/**
 * A port into the application that allows {@link AuthToken} management.
 */
public interface AuthTokenService {

    /**
     * Creates a new {@link AuthToken} for the {@link User} with the given {@code username}, only if the given
     * {@code password} matches the said {@link User}'s credentials.
     *
     * @param username The {@link User}'s username.
     * @param password The {@link User}'s password.
     * @return A {@link RawTokenContainer} with the information generated by this action.
     * Will include the access token, together with a refresh token (is another token that can only be used to
     * refresh a token through the {@link AuthTokenService#refreshToken(UUID)} method).
     * It also includes the {@link java.time.Instant} in which the token expires.
     * @throws UnauthenticatedException If the given credentials do not match.
     */
    RawTokenContainer issueToken(final String username, final String password) throws UnauthenticatedException;

    /**
     * Refreshes the {@link AuthToken} with the given {@code id}.
     *
     * @param id The token's id.
     * @return A {@link RawTokenContainer} with the new information of the token.
     * Will include a new refresh token.
     * @apiNote This method can only be executed when the refresh token is presented.
     */
    RawTokenContainer refreshToken(final UUID id) throws UnauthorizedException;

    /**
     * Blacklists the {@link AuthToken} with the given {@code id}.
     * Note that once a token is blacklisted, the associated refresh token won't be
     *
     * @param id The token's id.
     */
    void blacklistToken(final UUID id);

    /**
     * Lists the {@link AuthToken}s of the {@link User} with the given {@code username}.
     *
     * @param username The {@link User}'s username.
     * @return A {@link List} containing the {@link AuthToken}s
     * that belong to the {@link User} with the given {@code username}.
     */
    List<AuthToken> listTokens(final String username) throws NoSuchEntityException;
}
